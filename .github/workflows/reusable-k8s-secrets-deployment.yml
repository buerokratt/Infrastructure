# name: Reusable deployment of secrets to the k8s cluster

# on:
#   workflow_call:
#     inputs:
#       app_name:
#         type: string
#         required: true 
#         description: The name of the application to be deployed. Also used as the helm chart directory.
#       resource_group_name:
#         type: string
#         required: true
#         description: The name of the resource group that contains the k8s cluster, needed for authentication.
#       k8s_cluster_name:
#         type: string
#         required: true
#         description: The name of the k8s cluster, needed for authentication.
#       namespace_name:
#         type: string
#         required: true
#         description: The name of the k8s namespace to deploy the application too.
#       gh_environment:
#         type: string
#         required: true
#         description: The name of the environment.
#     secrets:
#       AZURE_CREDENTIALS:
#         required: true
    
# jobs:  
#   deploy_k8s_secrets:
#     env:
#       mock_classifier_app_name: mock-classifier
#       mock_bot_app_name: mock-bot
#       dmr_app_name: dmr
#       resource_name_prefix: ${{ env.project_name_short }}-${{ inputs.gh_environment }}
#       resource_group_name: ${{ env.resource_name_prefix }}-rg
#       k8s_cluster_name: ${{ env.resource_name_prefix }}-aks
#       key_vault_name: ${{ env.resource_name_prefix }}-kv  
#       secret_name_suffix: appsettings-secret 
#     runs-on: ubuntu-latest
#     environment: ${{ inputs.gh_environment }}
#     defaults:
#       run:
#         shell: bash
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3

#       - name: Azure authentication
#       - uses: Azure/login@v1
#         with:
#           creds: ${{ secrets.AZURE_CREDENTIALS }}
        
#       - name: Get secrets from key vault
#       - uses: Azure/get-keyvault-secrets@v1
#         with: 
#           keyvault: ${{ env.key_vault_name }}
#           secrets: 'CosmosDbKey'
#         id: appSecrets
      
#       - name: Get AKS Credentials
#         uses: Azure/aks-set-context@v1
#         with:
#           creds: ${{ secrets.AZURE_CREDENTIALS }}
#           resource-group: ${{ env.resource_group_name }}
#           cluster-name: ${{ env.k8s_cluster_name }}

#       - name: Check/create Kubernetes namespace
#         run: |
#          check_namespace=$(kubectl get namespace ${{ namespace_name }} --ignore-not-found) \
#          if ! [[ $check_namespace ]]; then \
#            kubectl create namespace ${{ namespace_name }} \
#          fi     

#       - name: Deploy dmr secrets to k8s
#       - if: ${{ inputs.app_name == env.dmr_app_name }}
#         run: |  
#           kubectl delete secret ${{ env.dmr_app_name }}-${{ env.secret_name_suffix }} \ 
#             --namespace ${{ env.dmr_app_name }} \
#             --ignore-not-found            
#           kubectl create secret generic ${{ env.dmr_app_name }}-${{ env.secret_name_suffix }} \
#             --namespace ${{ namespace_name }} \
#             --type Opaque \
#             --from-literal=CosmosDbKey=${{ steps.appSecrets.outputs.CosmosDbKey }}

#       # - name: Deploy mock-bot secrets to k8s
#       # - if: ${{ inputs.app_name == env.mock_bot_app_name }}
#       #   run: |  
#       #     kubectl delete secret ${{ env.mock_bot_app_name }}-${{ env.secret_name_suffix }} \ 
#       #       --namespace ${{ env.mock_bot_app_name }} \
#       #       --ignore-not-found            
#       #     kubectl create secret generic ${{ env.mock_bot_app_name }}-${{ env.secret_name_suffix }} \
#       #       --namespace ${{ namespace_name }} \
#       #       --type Opaque \
#       #       --from-literal=secretkey=secretvalue

#       # - name: Deploy mock-classifier secrets to k8s
#       # - if: ${{ inputs.app_name == env.mock_classifier_app_name }}
#       #   run: |  
#       #     kubectl delete secret ${{ env.mock_classifier_app_name }}-${{ env.secret_name_suffix }} \ 
#       #       --namespace ${{ env.mock_classifier_app_name }} \
#       #       --ignore-not-found            
#       #     kubectl create secret generic ${{ env.mock_classifier_app_name }}-${{ env.secret_name_suffix }} \
#       #       --namespace ${{ namespace_name }} \
#       #       --type Opaque \
#       #       --from-literal=secretkey=secretvalue