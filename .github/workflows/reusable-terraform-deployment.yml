name: Reusable_terraform_deployment
on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
      working_directory_path:
        type: string
        required: true
      tf_vars_file_path:
        type: string
        required: true
      backend_config_file_path:
        type: string
        required: true
    secrets:
      azure_ad_client_id:
        required: true
      azure_ad_client_secret:
        required: true
      azure_subscription_id:
        required: true
      azure_ad_tenant_id:
        required: true
      #TODO: Move this to key vault later on, this is required for the terraform backend setup
      azure_storage_account_key:
        required: true

jobs:
  Terraform:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        working-directory: ${{ inputs.working_directory_path }}
        shell: bash
    env:
      TF_VAR_client_id: ${{ secrets.azure_ad_client_id }}
      TF_VAR_client_secret: ${{ secrets.azure_ad_client_secret }}
      TF_VAR_subscription_id: ${{ secrets.azure_subscription_id }}
      TF_VAR_tenant_id: ${{ secrets.azure_ad_tenant_id }}
      #TODO: Move this to key vault later on, this is required for the terraform backend setup
      ARM_ACCESS_KEY: ${{ secrets.azure_storage_account_key }}
      tf_vars_file_path: ${{ inputs.tf_vars_file_path }}
      backend_config_file_path: ${{ inputs.backend_config_file_path }}
  
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
 
    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
        
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend-config=${{ inputs.backend_config_file_path }}

    # Test providers
    - name: Terraform providers
      run: terraform state replace-provider hashicorp/github integrations/github

    # Ensures all the terraform code and files are syntactically correct 
    - name: Terraform Validate
      run: terraform validate
    
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan --var-file=$tf_vars_file_path -input=false 
 
    # On push to main, build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      run: terraform apply --var-file=$tf_vars_file_path -auto-approve -input=false 